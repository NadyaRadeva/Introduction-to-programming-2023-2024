Дадена е правоъгълна матрица от символи matrix с максимална размерност 50 x 50. Съседни клетки на матрицата се наричат всички клетки, които имат общ ъгъл (по един от двата диагонала). Казваме, че дума се прочита в матрица, ако буквите ѝ се съдържат в матрицата в съседни клетки. В матрицата има и непроходими клетки, които се отбелязват със знака ‘#’.
a). Да се напише рекурсивна функция findWord([подходящ тип] _matrix_, char * word, [други параметри, ако са нужни]), която по матрица и дума връща дали думата се среща в матрицата.
Ако думата се среща в матрицата, символите ѝ да се заменят от знака ‘#’.
б). Да се напише програма, която демонстрира начина на работа на findWord.
Програмата трябва да въвежда от клавиатурата стойност за N и М - действителните размери на матрицата, елементите на матрицата и дума с максимална дължина 50 символа. 
Да се използва коректен тип и да се направи валидация за горната граница на N и М. Ако стойността за N или M е невалидна, да се хвърли грешка (изключение).
в). Да се напише функция findAll, която приема масив от максимум 30 низа с произволна, въведена от клавиатурата дължина, и връща дали всички думи могат да се прочетат в матрицата. 
Всеки символ от матрицата може да участва точно в една дума. 
Да се допълни програмата от б). и да се демонстрира въвеждането на данните за броя на низовете, техните дължини и стойности и работата на реализираната функция. 
Да се приеме, че за броя на низовете и техните дължини се въвеждат валидни неотрицателни стойности. 
Да се приеме, че всяка дума може да се прочете най-много веднъж в матрицата и се състои от малки латински букви.
Бонус: Да се реши в), ако е възможно дума да се прочете на повече от едно място.
